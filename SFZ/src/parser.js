module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = function(instrument) { return instrument; },
        peg$c2 = null,
        peg$c3 = function(elements) {

              function extend(target, source){
                target = target || {};
                for (var prop in source) {
                  if (typeof source[prop] === 'object') {
                    target[prop] = extend(target[prop], source[prop]);
                  } else {
                    target[prop] = source[prop];
                  }
                }
                return target;
              }

              function defaults(target, source){
                target = target || {};
                for (var prop in source) {
                  if (target[prop]) continue;
                  if (typeof source[prop] === 'object') {
                    target[prop] = defaults(target[prop], source[prop]);
                  } else {
                    target[prop] = source[prop];
                  }
                }
                return target;
              }

              elements = elements !== null ? elements : [];
              var global = null;
              var masters = [];
              var controls = [];
              var groups = [];
              var regions = [];
              var curves = [];
              var lastMaster = null
                , lastControl = null
                , lastGroup = null
                , lastNode = null
              for (var i = 0; i < elements.length; i++) {
                if (elements[i] == '<global>') {
                  lastNode = global = {}
                } else if (elements[i] == '<master>') {
                  lastNode = lastMaster = { masterId: "master" + masters.length }
                } else if (elements[i] == '<group>') {
                  lastNode = lastGroup = {}
                } else if (elements[i] == '<control>') {
                  lastNode = lastControl = {}
                } else if (elements[i] == "<region>") {
                  lastNode = {}
                  lastNode.master = lastMaster
                  lastNode.groupNode = lastGroup
                  lastNode.control = lastControl
                  lastNode.regionId = "r" + regions.length
                  regions.push(lastNode)
                } else if (elements[i] == "<curve>") {
                  lastNode = {}
                  curves.push(lastNode)
                } else {
                  var param = elements[i]
                    , name = param[0]
                    , value = param[1]

                  if (lastNode) {
                    extend(lastNode, elements[i])
                  }
                }
              }

              for (var i = 0; i < curves.length; i++) {
                var curve = curves[i]
                var newCurve = {}
                for (var key in curve) {
                  if (curve.hasOwnProperty(key)) {
                    var v = key.replace("v", "")
                    newCurve[parseInt(v, 10)] = curve[key]
                  }
                }
                curves[i] = newCurve
              }

              var isEmpty = function(obj) {
                if (obj == null) return true;
                for (var key in obj) if (obj.hasOwnProperty(key)) return false;
                return true;
              };

              var regionz = []
              for (var i = 0; i < regions.length; i++) {
                var region = regions[i]
                  , regionCopy = {}

                extend(regionCopy, region)
                delete regionCopy.master
                delete regionCopy.groupNode
                delete regionCopy.control
                delete regionCopy.regionId

                if (isEmpty(regionCopy)) {
                  continue;
                }

                if (global) defaults(region, global)
                if (region.control) defaults(region, region.control)
                if (region.groupNode) defaults(region, region.groupNode)

                if (region.default_path && region.sample) {
                  region.sample = region.default_path + region.sample
                  delete region.default_path
                }

                var noteOffset = 0
                if (region.octave_offset) {
                  noteOffset += region.octave_offset * 12
                  delete region.octave_offset
                }

                if (region.note_offset) {
                  noteOffset += region.note_offset
                  delete region.note_offset
                }

                if (noteOffset) {
                  if (region.lokey) region.lokey += noteOffset
                  if (region.hikey) region.hikey += noteOffset
                  if (region.pitch_keycenter) region.pitch_keycenter += noteOffset
                  if (region.sw_lokey) region.sw_lokey += noteOffset
                  if (region.sw_hikey) region.sw_hikey += noteOffset
                  if (region.sw_last) region.sw_last += noteOffset
                  if (region.sw_down) region.sw_down += noteOffset
                  if (region.sw_up) region.sw_up += noteOffset
                  if (region.sw_previous) region.sw_previous += noteOffset
                }

                if (region.master) {
                  defaults(region, region.master)
                  if (region.lokey && region.master.lokey) {
                    if (region.lokey < region.master.lokey) {
                      region.lokey = region.master.lokey
                    }
                  }

                  if (region.hikey && region.master.hikey) {
                    if (region.hikey > region.master.hikey) {
                      region.hikey = region.master.hikey
                    }
                  }

                  if (region.lovel && region.master.lovel) {
                    if (region.lovel < region.master.lovel) {
                      region.lovel = region.master.lovel
                    }
                  }

                  if (region.hivel && region.master.hivel) {
                    if (region.hivel > region.master.hivel) {
                      region.hivel = region.master.hivel
                    }
                  }
                }
                delete region.master
                delete region.groupNode
                delete region.control
                if (region.masterId) delete region.masterId
                regionz.push(region)
              }

              return {
                type: "Instrument",
                masters: masters,
                regions: regionz,
                curves: curves
              };
            },
        peg$c4 = [],
        peg$c5 = function(head, tail) {
              var result = [head];
              for (var i = 0; i < tail.length; i++) {
                result.push(tail[i][1]);
              }
              return result;
            },
        peg$c6 = { type: "any", description: "any character" },
        peg$c7 = { type: "other", description: "header" },
        peg$c8 = "<global>",
        peg$c9 = { type: "literal", value: "<global>", description: "\"<global>\"" },
        peg$c10 = "<master>",
        peg$c11 = { type: "literal", value: "<master>", description: "\"<master>\"" },
        peg$c12 = "<region>",
        peg$c13 = { type: "literal", value: "<region>", description: "\"<region>\"" },
        peg$c14 = "<group>",
        peg$c15 = { type: "literal", value: "<group>", description: "\"<group>\"" },
        peg$c16 = "<curve>",
        peg$c17 = { type: "literal", value: "<curve>", description: "\"<curve>\"" },
        peg$c18 = { type: "other", description: "opcode directive" },
        peg$c19 = "sample=",
        peg$c20 = { type: "literal", value: "sample=", description: "\"sample=\"" },
        peg$c21 = function(value) { return { sample: value } },
        peg$c22 = "key=",
        peg$c23 = { type: "literal", value: "key=", description: "\"key=\"" },
        peg$c24 = function(value) {
            return { lokey: value, hikey: value, pitch_keycenter: value }
          },
        peg$c25 = "sw_vel=",
        peg$c26 = { type: "literal", value: "sw_vel=", description: "\"sw_vel=\"" },
        peg$c27 = "current",
        peg$c28 = { type: "literal", value: "current", description: "\"current\"" },
        peg$c29 = "previous",
        peg$c30 = { type: "literal", value: "previous", description: "\"previous\"" },
        peg$c31 = function(value) { return { sw_vel: value } },
        peg$c32 = "sw_trigger=",
        peg$c33 = { type: "literal", value: "sw_trigger=", description: "\"sw_trigger=\"" },
        peg$c34 = "attack",
        peg$c35 = { type: "literal", value: "attack", description: "\"attack\"" },
        peg$c36 = "release",
        peg$c37 = { type: "literal", value: "release", description: "\"release\"" },
        peg$c38 = "first",
        peg$c39 = { type: "literal", value: "first", description: "\"first\"" },
        peg$c40 = "legato",
        peg$c41 = { type: "literal", value: "legato", description: "\"legato\"" },
        peg$c42 = function(value) { return { sw_trigger: value } },
        peg$c43 = "off_mode=",
        peg$c44 = { type: "literal", value: "off_mode=", description: "\"off_mode=\"" },
        peg$c45 = "fast",
        peg$c46 = { type: "literal", value: "fast", description: "\"fast\"" },
        peg$c47 = "normal",
        peg$c48 = { type: "literal", value: "normal", description: "\"normal\"" },
        peg$c49 = function(value) { return { off_mode: value } },
        peg$c50 = "fil_type=",
        peg$c51 = { type: "literal", value: "fil_type=", description: "\"fil_type=\"" },
        peg$c52 = "lpf_1p",
        peg$c53 = { type: "literal", value: "lpf_1p", description: "\"lpf_1p\"" },
        peg$c54 = "hpf_1p",
        peg$c55 = { type: "literal", value: "hpf_1p", description: "\"hpf_1p\"" },
        peg$c56 = "lpf_2p",
        peg$c57 = { type: "literal", value: "lpf_2p", description: "\"lpf_2p\"" },
        peg$c58 = "hpf_2p",
        peg$c59 = { type: "literal", value: "hpf_2p", description: "\"hpf_2p\"" },
        peg$c60 = "bpf_2p",
        peg$c61 = { type: "literal", value: "bpf_2p", description: "\"bpf_2p\"" },
        peg$c62 = "brf_2p",
        peg$c63 = { type: "literal", value: "brf_2p", description: "\"brf_2p\"" },
        peg$c64 = function(value) { return { fil_type: value } },
        peg$c65 = "=",
        peg$c66 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c67 = function(name, value) {
            var param = {}
            param[name] = value
            return param
          },
        peg$c68 = "gain",
        peg$c69 = { type: "literal", value: "gain", description: "\"gain\"" },
        peg$c70 = "power",
        peg$c71 = { type: "literal", value: "power", description: "\"power\"" },
        peg$c72 = "xf_keycurve",
        peg$c73 = { type: "literal", value: "xf_keycurve", description: "\"xf_keycurve\"" },
        peg$c74 = "xf_velcurve",
        peg$c75 = { type: "literal", value: "xf_velcurve", description: "\"xf_velcurve\"" },
        peg$c76 = "xf_cccurve",
        peg$c77 = { type: "literal", value: "xf_cccurve", description: "\"xf_cccurve\"" },
        peg$c78 = { type: "other", description: "midi note opcode" },
        peg$c79 = "lokey",
        peg$c80 = { type: "literal", value: "lokey", description: "\"lokey\"" },
        peg$c81 = "hikey",
        peg$c82 = { type: "literal", value: "hikey", description: "\"hikey\"" },
        peg$c83 = "pitch_keycenter",
        peg$c84 = { type: "literal", value: "pitch_keycenter", description: "\"pitch_keycenter\"" },
        peg$c85 = "sw_lokey",
        peg$c86 = { type: "literal", value: "sw_lokey", description: "\"sw_lokey\"" },
        peg$c87 = "sw_hikey",
        peg$c88 = { type: "literal", value: "sw_hikey", description: "\"sw_hikey\"" },
        peg$c89 = "sw_last",
        peg$c90 = { type: "literal", value: "sw_last", description: "\"sw_last\"" },
        peg$c91 = "sw_down",
        peg$c92 = { type: "literal", value: "sw_down", description: "\"sw_down\"" },
        peg$c93 = "sw_up",
        peg$c94 = { type: "literal", value: "sw_up", description: "\"sw_up\"" },
        peg$c95 = "sw_previous",
        peg$c96 = { type: "literal", value: "sw_previous", description: "\"sw_previous\"" },
        peg$c97 = "octave_offset",
        peg$c98 = { type: "literal", value: "octave_offset", description: "\"octave_offset\"" },
        peg$c99 = "note_offset",
        peg$c100 = { type: "literal", value: "note_offset", description: "\"note_offset\"" },
        peg$c101 = { type: "other", description: "float opcode" },
        peg$c102 = "fillfo_delay",
        peg$c103 = { type: "literal", value: "fillfo_delay", description: "\"fillfo_delay\"" },
        peg$c104 = "fillfo_fade",
        peg$c105 = { type: "literal", value: "fillfo_fade", description: "\"fillfo_fade\"" },
        peg$c106 = "fillfo_freq",
        peg$c107 = { type: "literal", value: "fillfo_freq", description: "\"fillfo_freq\"" },
        peg$c108 = "fillfo_freqcc1",
        peg$c109 = { type: "literal", value: "fillfo_freqcc1", description: "\"fillfo_freqcc1\"" },
        peg$c110 = "fillfo_freqcc2",
        peg$c111 = { type: "literal", value: "fillfo_freqcc2", description: "\"fillfo_freqcc2\"" },
        peg$c112 = "lorand",
        peg$c113 = { type: "literal", value: "lorand", description: "\"lorand\"" },
        peg$c114 = "hirand",
        peg$c115 = { type: "literal", value: "hirand", description: "\"hirand\"" },
        peg$c116 = "lotimer",
        peg$c117 = { type: "literal", value: "lotimer", description: "\"lotimer\"" },
        peg$c118 = "hitimer",
        peg$c119 = { type: "literal", value: "hitimer", description: "\"hitimer\"" },
        peg$c120 = "lobpm",
        peg$c121 = { type: "literal", value: "lobpm", description: "\"lobpm\"" },
        peg$c122 = "hibpm",
        peg$c123 = { type: "literal", value: "hibpm", description: "\"hibpm\"" },
        peg$c124 = "delay_random",
        peg$c125 = { type: "literal", value: "delay_random", description: "\"delay_random\"" },
        peg$c126 = "delay_cc1",
        peg$c127 = { type: "literal", value: "delay_cc1", description: "\"delay_cc1\"" },
        peg$c128 = "delay_cc2",
        peg$c129 = { type: "literal", value: "delay_cc2", description: "\"delay_cc2\"" },
        peg$c130 = "delay",
        peg$c131 = { type: "literal", value: "delay", description: "\"delay\"" },
        peg$c132 = "sync_beats",
        peg$c133 = { type: "literal", value: "sync_beats", description: "\"sync_beats\"" },
        peg$c134 = "sync_offset",
        peg$c135 = { type: "literal", value: "sync_offset", description: "\"sync_offset\"" },
        peg$c136 = "pitcheg_delay",
        peg$c137 = { type: "literal", value: "pitcheg_delay", description: "\"pitcheg_delay\"" },
        peg$c138 = "pitcheg_start",
        peg$c139 = { type: "literal", value: "pitcheg_start", description: "\"pitcheg_start\"" },
        peg$c140 = "pitcheg_attack",
        peg$c141 = { type: "literal", value: "pitcheg_attack", description: "\"pitcheg_attack\"" },
        peg$c142 = "pitcheg_hold",
        peg$c143 = { type: "literal", value: "pitcheg_hold", description: "\"pitcheg_hold\"" },
        peg$c144 = "pitcheg_decay",
        peg$c145 = { type: "literal", value: "pitcheg_decay", description: "\"pitcheg_decay\"" },
        peg$c146 = "pitcheg_sustain",
        peg$c147 = { type: "literal", value: "pitcheg_sustain", description: "\"pitcheg_sustain\"" },
        peg$c148 = "pitcheg_release",
        peg$c149 = { type: "literal", value: "pitcheg_release", description: "\"pitcheg_release\"" },
        peg$c150 = "pitcheg_vel2delay",
        peg$c151 = { type: "literal", value: "pitcheg_vel2delay", description: "\"pitcheg_vel2delay\"" },
        peg$c152 = "pitcheg_vel2attack",
        peg$c153 = { type: "literal", value: "pitcheg_vel2attack", description: "\"pitcheg_vel2attack\"" },
        peg$c154 = "pitcheg_vel2hold",
        peg$c155 = { type: "literal", value: "pitcheg_vel2hold", description: "\"pitcheg_vel2hold\"" },
        peg$c156 = "pitcheg_vel2decay",
        peg$c157 = { type: "literal", value: "pitcheg_vel2decay", description: "\"pitcheg_vel2decay\"" },
        peg$c158 = "pitcheg_vel2sustain",
        peg$c159 = { type: "literal", value: "pitcheg_vel2sustain", description: "\"pitcheg_vel2sustain\"" },
        peg$c160 = "pitchlfo_delay",
        peg$c161 = { type: "literal", value: "pitchlfo_delay", description: "\"pitchlfo_delay\"" },
        peg$c162 = "pitchlfo_fade",
        peg$c163 = { type: "literal", value: "pitchlfo_fade", description: "\"pitchlfo_fade\"" },
        peg$c164 = "pitchlfo_freqcc1",
        peg$c165 = { type: "literal", value: "pitchlfo_freqcc1", description: "\"pitchlfo_freqcc1\"" },
        peg$c166 = "pitchlfo_freqcc60",
        peg$c167 = { type: "literal", value: "pitchlfo_freqcc60", description: "\"pitchlfo_freqcc60\"" },
        peg$c168 = "pitchlfo_freqchanaft",
        peg$c169 = { type: "literal", value: "pitchlfo_freqchanaft", description: "\"pitchlfo_freqchanaft\"" },
        peg$c170 = "pitchlfo_freqpolyaft",
        peg$c171 = { type: "literal", value: "pitchlfo_freqpolyaft", description: "\"pitchlfo_freqpolyaft\"" },
        peg$c172 = "pitchlfo_freq",
        peg$c173 = { type: "literal", value: "pitchlfo_freq", description: "\"pitchlfo_freq\"" },
        peg$c174 = "cutoff",
        peg$c175 = { type: "literal", value: "cutoff", description: "\"cutoff\"" },
        peg$c176 = "resonance",
        peg$c177 = { type: "literal", value: "resonance", description: "\"resonance\"" },
        peg$c178 = "fileg_delay",
        peg$c179 = { type: "literal", value: "fileg_delay", description: "\"fileg_delay\"" },
        peg$c180 = "fileg_start",
        peg$c181 = { type: "literal", value: "fileg_start", description: "\"fileg_start\"" },
        peg$c182 = "fileg_attack",
        peg$c183 = { type: "literal", value: "fileg_attack", description: "\"fileg_attack\"" },
        peg$c184 = "fileg_hold",
        peg$c185 = { type: "literal", value: "fileg_hold", description: "\"fileg_hold\"" },
        peg$c186 = "fileg_decay",
        peg$c187 = { type: "literal", value: "fileg_decay", description: "\"fileg_decay\"" },
        peg$c188 = "fileg_sustain",
        peg$c189 = { type: "literal", value: "fileg_sustain", description: "\"fileg_sustain\"" },
        peg$c190 = "fileg_release",
        peg$c191 = { type: "literal", value: "fileg_release", description: "\"fileg_release\"" },
        peg$c192 = "fileg_vel2delay",
        peg$c193 = { type: "literal", value: "fileg_vel2delay", description: "\"fileg_vel2delay\"" },
        peg$c194 = "fileg_vel2attack",
        peg$c195 = { type: "literal", value: "fileg_vel2attack", description: "\"fileg_vel2attack\"" },
        peg$c196 = "fileg_vel2hold",
        peg$c197 = { type: "literal", value: "fileg_vel2hold", description: "\"fileg_vel2hold\"" },
        peg$c198 = "fileg_vel2decay",
        peg$c199 = { type: "literal", value: "fileg_vel2decay", description: "\"fileg_vel2decay\"" },
        peg$c200 = "fileg_vel2sustain",
        peg$c201 = { type: "literal", value: "fileg_vel2sustain", description: "\"fileg_vel2sustain\"" },
        peg$c202 = "fileg_vel2release",
        peg$c203 = { type: "literal", value: "fileg_vel2release", description: "\"fileg_vel2release\"" },
        peg$c204 = "volume",
        peg$c205 = { type: "literal", value: "volume", description: "\"volume\"" },
        peg$c206 = "pan",
        peg$c207 = { type: "literal", value: "pan", description: "\"pan\"" },
        peg$c208 = "width",
        peg$c209 = { type: "literal", value: "width", description: "\"width\"" },
        peg$c210 = "position",
        peg$c211 = { type: "literal", value: "position", description: "\"position\"" },
        peg$c212 = "amp_keytrack",
        peg$c213 = { type: "literal", value: "amp_keytrack", description: "\"amp_keytrack\"" },
        peg$c214 = "amp_veltrack",
        peg$c215 = { type: "literal", value: "amp_veltrack", description: "\"amp_veltrack\"" },
        peg$c216 = "amp_velcurve_1",
        peg$c217 = { type: "literal", value: "amp_velcurve_1", description: "\"amp_velcurve_1\"" },
        peg$c218 = "amp_velcurve_127",
        peg$c219 = { type: "literal", value: "amp_velcurve_127", description: "\"amp_velcurve_127\"" },
        peg$c220 = "amp_random",
        peg$c221 = { type: "literal", value: "amp_random", description: "\"amp_random\"" },
        peg$c222 = "rt_decay",
        peg$c223 = { type: "literal", value: "rt_decay", description: "\"rt_decay\"" },
        peg$c224 = "ampeg_delay",
        peg$c225 = { type: "literal", value: "ampeg_delay", description: "\"ampeg_delay\"" },
        peg$c226 = "ampeg_start",
        peg$c227 = { type: "literal", value: "ampeg_start", description: "\"ampeg_start\"" },
        peg$c228 = "ampeg_attack",
        peg$c229 = { type: "literal", value: "ampeg_attack", description: "\"ampeg_attack\"" },
        peg$c230 = "ampeg_hold",
        peg$c231 = { type: "literal", value: "ampeg_hold", description: "\"ampeg_hold\"" },
        peg$c232 = "ampeg_decay",
        peg$c233 = { type: "literal", value: "ampeg_decay", description: "\"ampeg_decay\"" },
        peg$c234 = "ampeg_sustain",
        peg$c235 = { type: "literal", value: "ampeg_sustain", description: "\"ampeg_sustain\"" },
        peg$c236 = "ampeg_release",
        peg$c237 = { type: "literal", value: "ampeg_release", description: "\"ampeg_release\"" },
        peg$c238 = "ampeg_vel2delay",
        peg$c239 = { type: "literal", value: "ampeg_vel2delay", description: "\"ampeg_vel2delay\"" },
        peg$c240 = "ampeg_vel2attack",
        peg$c241 = { type: "literal", value: "ampeg_vel2attack", description: "\"ampeg_vel2attack\"" },
        peg$c242 = "ampeg_vel2hold",
        peg$c243 = { type: "literal", value: "ampeg_vel2hold", description: "\"ampeg_vel2hold\"" },
        peg$c244 = "ampeg_vel2decay",
        peg$c245 = { type: "literal", value: "ampeg_vel2decay", description: "\"ampeg_vel2decay\"" },
        peg$c246 = "ampeg_vel2sustain",
        peg$c247 = { type: "literal", value: "ampeg_vel2sustain", description: "\"ampeg_vel2sustain\"" },
        peg$c248 = "ampeg_vel2release",
        peg$c249 = { type: "literal", value: "ampeg_vel2release", description: "\"ampeg_vel2release\"" },
        peg$c250 = "amplfo_delay",
        peg$c251 = { type: "literal", value: "amplfo_delay", description: "\"amplfo_delay\"" },
        peg$c252 = "amplfo_fade",
        peg$c253 = { type: "literal", value: "amplfo_fade", description: "\"amplfo_fade\"" },
        peg$c254 = "amplfo_depthchanaft",
        peg$c255 = { type: "literal", value: "amplfo_depthchanaft", description: "\"amplfo_depthchanaft\"" },
        peg$c256 = "amplfo_depthpolyaft",
        peg$c257 = { type: "literal", value: "amplfo_depthpolyaft", description: "\"amplfo_depthpolyaft\"" },
        peg$c258 = "amplfo_depth",
        peg$c259 = { type: "literal", value: "amplfo_depth", description: "\"amplfo_depth\"" },
        peg$c260 = "amplfo_freqchanaft",
        peg$c261 = { type: "literal", value: "amplfo_freqchanaft", description: "\"amplfo_freqchanaft\"" },
        peg$c262 = "amplfo_freqpolyaft",
        peg$c263 = { type: "literal", value: "amplfo_freqpolyaft", description: "\"amplfo_freqpolyaft\"" },
        peg$c264 = "amplfo_freq",
        peg$c265 = { type: "literal", value: "amplfo_freq", description: "\"amplfo_freq\"" },
        peg$c266 = "eq1_freq",
        peg$c267 = { type: "literal", value: "eq1_freq", description: "\"eq1_freq\"" },
        peg$c268 = "eq2_freq",
        peg$c269 = { type: "literal", value: "eq2_freq", description: "\"eq2_freq\"" },
        peg$c270 = "eq3_freq",
        peg$c271 = { type: "literal", value: "eq3_freq", description: "\"eq3_freq\"" },
        peg$c272 = "eq1_vel2freq",
        peg$c273 = { type: "literal", value: "eq1_vel2freq", description: "\"eq1_vel2freq\"" },
        peg$c274 = "eq2_vel2freq",
        peg$c275 = { type: "literal", value: "eq2_vel2freq", description: "\"eq2_vel2freq\"" },
        peg$c276 = "eq3_vel2freq",
        peg$c277 = { type: "literal", value: "eq3_vel2freq", description: "\"eq3_vel2freq\"" },
        peg$c278 = "eq1_bw",
        peg$c279 = { type: "literal", value: "eq1_bw", description: "\"eq1_bw\"" },
        peg$c280 = "eq2_bw",
        peg$c281 = { type: "literal", value: "eq2_bw", description: "\"eq2_bw\"" },
        peg$c282 = "eq3_bw",
        peg$c283 = { type: "literal", value: "eq3_bw", description: "\"eq3_bw\"" },
        peg$c284 = "eq1_gain",
        peg$c285 = { type: "literal", value: "eq1_gain", description: "\"eq1_gain\"" },
        peg$c286 = "eq2_gain",
        peg$c287 = { type: "literal", value: "eq2_gain", description: "\"eq2_gain\"" },
        peg$c288 = "eq3_gain",
        peg$c289 = { type: "literal", value: "eq3_gain", description: "\"eq3_gain\"" },
        peg$c290 = "eq1_vel2gain",
        peg$c291 = { type: "literal", value: "eq1_vel2gain", description: "\"eq1_vel2gain\"" },
        peg$c292 = "eq2_vel2gain",
        peg$c293 = { type: "literal", value: "eq2_vel2gain", description: "\"eq2_vel2gain\"" },
        peg$c294 = "eq3_vel2gain",
        peg$c295 = { type: "literal", value: "eq3_vel2gain", description: "\"eq3_vel2gain\"" },
        peg$c296 = "effect1",
        peg$c297 = { type: "literal", value: "effect1", description: "\"effect1\"" },
        peg$c298 = "effect2",
        peg$c299 = { type: "literal", value: "effect2", description: "\"effect2\"" },
        peg$c300 = { type: "other", description: "integer opcode" },
        peg$c301 = "fillfo_depthcc1",
        peg$c302 = { type: "literal", value: "fillfo_depthcc1", description: "\"fillfo_depthcc1\"" },
        peg$c303 = "fillfo_depthcc60",
        peg$c304 = { type: "literal", value: "fillfo_depthcc60", description: "\"fillfo_depthcc60\"" },
        peg$c305 = "fillfo_freqchanaft",
        peg$c306 = { type: "literal", value: "fillfo_freqchanaft", description: "\"fillfo_freqchanaft\"" },
        peg$c307 = "fillfo_freqpolyaft",
        peg$c308 = { type: "literal", value: "fillfo_freqpolyaft", description: "\"fillfo_freqpolyaft\"" },
        peg$c309 = "fillfo_depth",
        peg$c310 = { type: "literal", value: "fillfo_depth", description: "\"fillfo_depth\"" },
        peg$c311 = "lovel",
        peg$c312 = { type: "literal", value: "lovel", description: "\"lovel\"" },
        peg$c313 = "hivel",
        peg$c314 = { type: "literal", value: "hivel", description: "\"hivel\"" },
        peg$c315 = "lobend",
        peg$c316 = { type: "literal", value: "lobend", description: "\"lobend\"" },
        peg$c317 = "hibend",
        peg$c318 = { type: "literal", value: "hibend", description: "\"hibend\"" },
        peg$c319 = "lochanaft",
        peg$c320 = { type: "literal", value: "lochanaft", description: "\"lochanaft\"" },
        peg$c321 = "hichanaft",
        peg$c322 = { type: "literal", value: "hichanaft", description: "\"hichanaft\"" },
        peg$c323 = "lochan",
        peg$c324 = { type: "literal", value: "lochan", description: "\"lochan\"" },
        peg$c325 = "hichan",
        peg$c326 = { type: "literal", value: "hichan", description: "\"hichan\"" },
        peg$c327 = "loprog",
        peg$c328 = { type: "literal", value: "loprog", description: "\"loprog\"" },
        peg$c329 = "hiprog",
        peg$c330 = { type: "literal", value: "hiprog", description: "\"hiprog\"" },
        peg$c331 = "lopolyaft",
        peg$c332 = { type: "literal", value: "lopolyaft", description: "\"lopolyaft\"" },
        peg$c333 = "hipolyaft",
        peg$c334 = { type: "literal", value: "hipolyaft", description: "\"hipolyaft\"" },
        peg$c335 = "seq_length",
        peg$c336 = { type: "literal", value: "seq_length", description: "\"seq_length\"" },
        peg$c337 = "seq_position",
        peg$c338 = { type: "literal", value: "seq_position", description: "\"seq_position\"" },
        peg$c339 = "group",
        peg$c340 = { type: "literal", value: "group", description: "\"group\"" },
        peg$c341 = "off_by",
        peg$c342 = { type: "literal", value: "off_by", description: "\"off_by\"" },
        peg$c343 = "offset_random",
        peg$c344 = { type: "literal", value: "offset_random", description: "\"offset_random\"" },
        peg$c345 = "offset_cc1",
        peg$c346 = { type: "literal", value: "offset_cc1", description: "\"offset_cc1\"" },
        peg$c347 = "offset_cc64",
        peg$c348 = { type: "literal", value: "offset_cc64", description: "\"offset_cc64\"" },
        peg$c349 = "offset",
        peg$c350 = { type: "literal", value: "offset", description: "\"offset\"" },
        peg$c351 = "end",
        peg$c352 = { type: "literal", value: "end", description: "\"end\"" },
        peg$c353 = "count",
        peg$c354 = { type: "literal", value: "count", description: "\"count\"" },
        peg$c355 = "loop_start",
        peg$c356 = { type: "literal", value: "loop_start", description: "\"loop_start\"" },
        peg$c357 = "loop_end",
        peg$c358 = { type: "literal", value: "loop_end", description: "\"loop_end\"" },
        peg$c359 = "transpose",
        peg$c360 = { type: "literal", value: "transpose", description: "\"transpose\"" },
        peg$c361 = "tune",
        peg$c362 = { type: "literal", value: "tune", description: "\"tune\"" },
        peg$c363 = "pitch_keytrack",
        peg$c364 = { type: "literal", value: "pitch_keytrack", description: "\"pitch_keytrack\"" },
        peg$c365 = "pitch_veltrack",
        peg$c366 = { type: "literal", value: "pitch_veltrack", description: "\"pitch_veltrack\"" },
        peg$c367 = "pitch_random",
        peg$c368 = { type: "literal", value: "pitch_random", description: "\"pitch_random\"" },
        peg$c369 = "bend_up",
        peg$c370 = { type: "literal", value: "bend_up", description: "\"bend_up\"" },
        peg$c371 = "bend_down",
        peg$c372 = { type: "literal", value: "bend_down", description: "\"bend_down\"" },
        peg$c373 = "pitcheg_depth",
        peg$c374 = { type: "literal", value: "pitcheg_depth", description: "\"pitcheg_depth\"" },
        peg$c375 = "fileg_depth",
        peg$c376 = { type: "literal", value: "fileg_depth", description: "\"fileg_depth\"" },
        peg$c377 = "fileg_vel2depth",
        peg$c378 = { type: "literal", value: "fileg_vel2depth", description: "\"fileg_vel2depth\"" },
        peg$c379 = "fil_keytrack",
        peg$c380 = { type: "literal", value: "fil_keytrack", description: "\"fil_keytrack\"" },
        peg$c381 = "fil_keycenter",
        peg$c382 = { type: "literal", value: "fil_keycenter", description: "\"fil_keycenter\"" },
        peg$c383 = "fil_veltrack",
        peg$c384 = { type: "literal", value: "fil_veltrack", description: "\"fil_veltrack\"" },
        peg$c385 = "fil_random",
        peg$c386 = { type: "literal", value: "fil_random", description: "\"fil_random\"" },
        peg$c387 = "cutoff_cc1",
        peg$c388 = { type: "literal", value: "cutoff_cc1", description: "\"cutoff_cc1\"" },
        peg$c389 = "cutoff_cc2",
        peg$c390 = { type: "literal", value: "cutoff_cc2", description: "\"cutoff_cc2\"" },
        peg$c391 = "cutoff_chanaft",
        peg$c392 = { type: "literal", value: "cutoff_chanaft", description: "\"cutoff_chanaft\"" },
        peg$c393 = "cutoff_polyaft",
        peg$c394 = { type: "literal", value: "cutoff_polyaft", description: "\"cutoff_polyaft\"" },
        peg$c395 = "pitchlfo_depthcc1",
        peg$c396 = { type: "literal", value: "pitchlfo_depthcc1", description: "\"pitchlfo_depthcc1\"" },
        peg$c397 = "pitchlfo_depthcc60",
        peg$c398 = { type: "literal", value: "pitchlfo_depthcc60", description: "\"pitchlfo_depthcc60\"" },
        peg$c399 = "pitchlfo_depthchanaft",
        peg$c400 = { type: "literal", value: "pitchlfo_depthchanaft", description: "\"pitchlfo_depthchanaft\"" },
        peg$c401 = "pitchlfo_depthpolyaft",
        peg$c402 = { type: "literal", value: "pitchlfo_depthpolyaft", description: "\"pitchlfo_depthpolyaft\"" },
        peg$c403 = "pitchlfo_depth",
        peg$c404 = { type: "literal", value: "pitchlfo_depth", description: "\"pitchlfo_depth\"" },
        peg$c405 = "pitcheg_vel2depth",
        peg$c406 = { type: "literal", value: "pitcheg_vel2depth", description: "\"pitcheg_vel2depth\"" },
        peg$c407 = "amp_keycenter",
        peg$c408 = { type: "literal", value: "amp_keycenter", description: "\"amp_keycenter\"" },
        peg$c409 = "output",
        peg$c410 = { type: "literal", value: "output", description: "\"output\"" },
        peg$c411 = "xfin_lokey",
        peg$c412 = { type: "literal", value: "xfin_lokey", description: "\"xfin_lokey\"" },
        peg$c413 = "xfin_hikey",
        peg$c414 = { type: "literal", value: "xfin_hikey", description: "\"xfin_hikey\"" },
        peg$c415 = "xfin_lovel",
        peg$c416 = { type: "literal", value: "xfin_lovel", description: "\"xfin_lovel\"" },
        peg$c417 = "xfin_hivel",
        peg$c418 = { type: "literal", value: "xfin_hivel", description: "\"xfin_hivel\"" },
        peg$c419 = "xfout_lovel",
        peg$c420 = { type: "literal", value: "xfout_lovel", description: "\"xfout_lovel\"" },
        peg$c421 = "xfout_hivel",
        peg$c422 = { type: "literal", value: "xfout_hivel", description: "\"xfout_hivel\"" },
        peg$c423 = function(n, i) { return n + i },
        peg$c424 = { type: "other", description: "sequential float opcode" },
        peg$c425 = "fillfo_freqcc",
        peg$c426 = { type: "literal", value: "fillfo_freqcc", description: "\"fillfo_freqcc\"" },
        peg$c427 = "gain_cc",
        peg$c428 = { type: "literal", value: "gain_cc", description: "\"gain_cc\"" },
        peg$c429 = "ampeg_delaycc",
        peg$c430 = { type: "literal", value: "ampeg_delaycc", description: "\"ampeg_delaycc\"" },
        peg$c431 = "ampeg_startcc",
        peg$c432 = { type: "literal", value: "ampeg_startcc", description: "\"ampeg_startcc\"" },
        peg$c433 = "ampeg_attackcc",
        peg$c434 = { type: "literal", value: "ampeg_attackcc", description: "\"ampeg_attackcc\"" },
        peg$c435 = "ampeg_holdcc",
        peg$c436 = { type: "literal", value: "ampeg_holdcc", description: "\"ampeg_holdcc\"" },
        peg$c437 = "ampeg_decaycc",
        peg$c438 = { type: "literal", value: "ampeg_decaycc", description: "\"ampeg_decaycc\"" },
        peg$c439 = "ampeg_sustaincc",
        peg$c440 = { type: "literal", value: "ampeg_sustaincc", description: "\"ampeg_sustaincc\"" },
        peg$c441 = "ampeg_releasecc",
        peg$c442 = { type: "literal", value: "ampeg_releasecc", description: "\"ampeg_releasecc\"" },
        peg$c443 = "amplfo_depthcc",
        peg$c444 = { type: "literal", value: "amplfo_depthcc", description: "\"amplfo_depthcc\"" },
        peg$c445 = "amplfo_freqcc",
        peg$c446 = { type: "literal", value: "amplfo_freqcc", description: "\"amplfo_freqcc\"" },
        peg$c447 = "eq1_freqcc",
        peg$c448 = { type: "literal", value: "eq1_freqcc", description: "\"eq1_freqcc\"" },
        peg$c449 = "eq2_freqcc",
        peg$c450 = { type: "literal", value: "eq2_freqcc", description: "\"eq2_freqcc\"" },
        peg$c451 = "eq3_freqcc",
        peg$c452 = { type: "literal", value: "eq3_freqcc", description: "\"eq3_freqcc\"" },
        peg$c453 = "eq1_bwcc",
        peg$c454 = { type: "literal", value: "eq1_bwcc", description: "\"eq1_bwcc\"" },
        peg$c455 = "eq2_bwcc",
        peg$c456 = { type: "literal", value: "eq2_bwcc", description: "\"eq2_bwcc\"" },
        peg$c457 = "eq3_bwcc",
        peg$c458 = { type: "literal", value: "eq3_bwcc", description: "\"eq3_bwcc\"" },
        peg$c459 = "eq1_gaincc",
        peg$c460 = { type: "literal", value: "eq1_gaincc", description: "\"eq1_gaincc\"" },
        peg$c461 = "eq2_gaincc",
        peg$c462 = { type: "literal", value: "eq2_gaincc", description: "\"eq2_gaincc\"" },
        peg$c463 = "eq3_gaincc",
        peg$c464 = { type: "literal", value: "eq3_gaincc", description: "\"eq3_gaincc\"" },
        peg$c465 = "amp_velcurve_",
        peg$c466 = { type: "literal", value: "amp_velcurve_", description: "\"amp_velcurve_\"" },
        peg$c467 = "fillfo_depthcc",
        peg$c468 = { type: "literal", value: "fillfo_depthcc", description: "\"fillfo_depthcc\"" },
        peg$c469 = "xfin_locc",
        peg$c470 = { type: "literal", value: "xfin_locc", description: "\"xfin_locc\"" },
        peg$c471 = "xfin_hicc",
        peg$c472 = { type: "literal", value: "xfin_hicc", description: "\"xfin_hicc\"" },
        peg$c473 = "xfout_locc",
        peg$c474 = { type: "literal", value: "xfout_locc", description: "\"xfout_locc\"" },
        peg$c475 = "xfout_hicc",
        peg$c476 = { type: "literal", value: "xfout_hicc", description: "\"xfout_hicc\"" },
        peg$c477 = "delay_cc",
        peg$c478 = { type: "literal", value: "delay_cc", description: "\"delay_cc\"" },
        peg$c479 = "offset_cc",
        peg$c480 = { type: "literal", value: "offset_cc", description: "\"offset_cc\"" },
        peg$c481 = "pitchlfo_depthcc",
        peg$c482 = { type: "literal", value: "pitchlfo_depthcc", description: "\"pitchlfo_depthcc\"" },
        peg$c483 = "pitchlfo_freqcc",
        peg$c484 = { type: "literal", value: "pitchlfo_freqcc", description: "\"pitchlfo_freqcc\"" },
        peg$c485 = "cutoff_cc",
        peg$c486 = { type: "literal", value: "cutoff_cc", description: "\"cutoff_cc\"" },
        peg$c487 = "loop_mode",
        peg$c488 = { type: "literal", value: "loop_mode", description: "\"loop_mode\"" },
        peg$c489 = "no_loop",
        peg$c490 = { type: "literal", value: "no_loop", description: "\"no_loop\"" },
        peg$c491 = "one_shot",
        peg$c492 = { type: "literal", value: "one_shot", description: "\"one_shot\"" },
        peg$c493 = "loop_continuous",
        peg$c494 = { type: "literal", value: "loop_continuous", description: "\"loop_continuous\"" },
        peg$c495 = "loop_sustain",
        peg$c496 = { type: "literal", value: "loop_sustain", description: "\"loop_sustain\"" },
        peg$c497 = function(value) { return { loop_mode: value } },
        peg$c498 = /^[0-9]/,
        peg$c499 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c500 = /^[1-9]/,
        peg$c501 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c502 = /^[eE]/,
        peg$c503 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c504 = /^[\-+]/,
        peg$c505 = { type: "class", value: "[\\-+]", description: "[\\-+]" },
        peg$c506 = function(sign, digits) {
            sign = sign || ""
            return parseInt(sign + digits.join(""), 10)
          },
        peg$c507 = ".",
        peg$c508 = { type: "literal", value: ".", description: "\".\"" },
        peg$c509 = function(parts) {
              return parseFloat(parts);
            },
        peg$c510 = function(parts) { return parseFloat(parts); },
        peg$c511 = "0",
        peg$c512 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c513 = function(sign, decimal) {
           sign = sign || ""
          return parseFloat(sign + decimal)
         },
        peg$c514 = function(pitch, accidental, octave) {
            return (pitch + accidental) + (octave + 1) * 12
          },
        peg$c515 = /^[a-gA-G]/,
        peg$c516 = { type: "class", value: "[a-gA-G]", description: "[a-gA-G]" },
        peg$c517 = function(note) {
            var pitches = {
              "c": 0,
              "d": 2,
              "e": 4,
              "f": 5,
              "g": 7,
              "a": 9,
              "b": 11
            }
            return pitches[note.toLowerCase()]
          },
        peg$c518 = /^[#b]/,
        peg$c519 = { type: "class", value: "[#b]", description: "[#b]" },
        peg$c520 = function(accidental) {
            switch (accidental) {
              case "#":
                return 1
              case "b":
                return -1
              default:
                return 0
            }
          },
        peg$c521 = function(name, ext) { return name + ext },
        peg$c522 = void 0,
        peg$c523 = function(c) { return c },
        peg$c524 = function(chars) {
           return chars.join("")
         },
        peg$c525 = "../",
        peg$c526 = { type: "literal", value: "../", description: "\"../\"" },
        peg$c527 = ".wav",
        peg$c528 = { type: "literal", value: ".wav", description: "\".wav\"" },
        peg$c529 = ".ogg",
        peg$c530 = { type: "literal", value: ".ogg", description: "\".ogg\"" },
        peg$c531 = ".mp3",
        peg$c532 = { type: "literal", value: ".mp3", description: "\".mp3\"" },
        peg$c533 = { type: "other", description: "whitespace" },
        peg$c534 = /^[\t\x0B\f \xA0\uFEFF]/,
        peg$c535 = { type: "class", value: "[\\t\\x0B\\f \\xA0\\uFEFF]", description: "[\\t\\x0B\\f \\xA0\\uFEFF]" },
        peg$c536 = /^[\n\r\u2028\u2029]/,
        peg$c537 = { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
        peg$c538 = { type: "other", description: "end of line" },
        peg$c539 = "\n",
        peg$c540 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c541 = "\r\n",
        peg$c542 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c543 = "\r",
        peg$c544 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c545 = "\u2028",
        peg$c546 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c547 = "\u2029",
        peg$c548 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
        peg$c549 = { type: "other", description: "comment" },
        peg$c550 = "/*",
        peg$c551 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c552 = "*/",
        peg$c553 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c554 = "//",
        peg$c555 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c556 = /^[ \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000]/,
        peg$c557 = { type: "class", value: "[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]", description: "[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]" },
        peg$c558 = ";",
        peg$c559 = { type: "literal", value: ";", description: "\";\"" },
        peg$c560 = "}",
        peg$c561 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c562 = "<control>",
        peg$c563 = { type: "literal", value: "<control>", description: "\"<control>\"" },
        peg$c564 = "hint_ram_based",
        peg$c565 = { type: "literal", value: "hint_ram_based", description: "\"hint_ram_based\"" },
        peg$c566 = "global_volume",
        peg$c567 = { type: "literal", value: "global_volume", description: "\"global_volume\"" },
        peg$c568 = "lfo06_freq",
        peg$c569 = { type: "literal", value: "lfo06_freq", description: "\"lfo06_freq\"" },
        peg$c570 = "lfo06_pitch",
        peg$c571 = { type: "literal", value: "lfo06_pitch", description: "\"lfo06_pitch\"" },
        peg$c572 = "lfo06_wave",
        peg$c573 = { type: "literal", value: "lfo06_wave", description: "\"lfo06_wave\"" },
        peg$c574 = "lfo06_pitch_oncc129",
        peg$c575 = { type: "literal", value: "lfo06_pitch_oncc129", description: "\"lfo06_pitch_oncc129\"" },
        peg$c576 = "set_cc",
        peg$c577 = { type: "literal", value: "set_cc", description: "\"set_cc\"" },
        peg$c578 = "lfo06_pitch_oncc",
        peg$c579 = { type: "literal", value: "lfo06_pitch_oncc", description: "\"lfo06_pitch_oncc\"" },
        peg$c580 = "amplitude_oncc",
        peg$c581 = { type: "literal", value: "amplitude_oncc", description: "\"amplitude_oncc\"" },
        peg$c582 = "amplitude_curvecc",
        peg$c583 = { type: "literal", value: "amplitude_curvecc", description: "\"amplitude_curvecc\"" },
        peg$c584 = "region_label=",
        peg$c585 = { type: "literal", value: "region_label=", description: "\"region_label=\"" },
        peg$c586 = function(value) { return { region_label: value } },
        peg$c587 = "default_path=",
        peg$c588 = { type: "literal", value: "default_path=", description: "\"default_path=\"" },
        peg$c589 = function(value) { return { default_path: value } },
        peg$c590 = "v",
        peg$c591 = { type: "literal", value: "v", description: "\"v\"" },
        peg$c592 = function(digits, value) {
            var param = {}
            var name = "v" + digits.join("")
            param[name] = value
            return param
          },
        peg$c593 = "eg",
        peg$c594 = { type: "literal", value: "eg", description: "\"eg\"" },
        peg$c595 = "_cutoff=",
        peg$c596 = { type: "literal", value: "_cutoff=", description: "\"_cutoff=\"" },
        peg$c597 = function(digits, value) {
            var param = {}
            var name = "eg" + digits.join("")
            param[name] = value
            return param
          },
        peg$c598 = "_sustain=",
        peg$c599 = { type: "literal", value: "_sustain=", description: "\"_sustain=\"" },
        peg$c600 = "_pitch=",
        peg$c601 = { type: "literal", value: "_pitch=", description: "\"_pitch=\"" },
        peg$c602 = "_time",
        peg$c603 = { type: "literal", value: "_time", description: "\"_time\"" },
        peg$c604 = function(digits, node, value) {
            var param = {}
            var name = "eg" + digits.join("") + "_time" + node
            param[name] = value
            return param
          },
        peg$c605 = "_level",
        peg$c606 = { type: "literal", value: "_level", description: "\"_level\"" },
        peg$c607 = function(digits, node, value) {
            var param = {}
            var name = "eg" + digits.join("") + "_level" + node
            param[name] = value
            return param
          },
        peg$c608 = "_shape",
        peg$c609 = { type: "literal", value: "_shape", description: "\"_shape\"" },
        peg$c610 = function(digits, node, value) {
            var param = {}
            var name = "eg" + digits.join("") + "_shape" + node
            param[name] = value
            return param
          },
        peg$c611 = "lfo",
        peg$c612 = { type: "literal", value: "lfo", description: "\"lfo\"" },
        peg$c613 = "_wave=",
        peg$c614 = { type: "literal", value: "_wave=", description: "\"_wave=\"" },
        peg$c615 = function(digits, value) {
            var param = {}
            var name = "lfo" + digits.join("") + "_wave"
            param[name] = value
            return param
          },
        peg$c616 = "_freq=",
        peg$c617 = { type: "literal", value: "_freq=", description: "\"_freq=\"" },
        peg$c618 = function(digits, value) {
            var param = {}
            var name = "lfo" + digits.join("") + "_freq"
            param[name] = value
            return param
          },
        peg$c619 = function(digits, value) {
            var param = {}
            var name = "lfo" + digits.join("") + "_pitch"
            param[name] = value
            return param
          },
        peg$c620 = "_delay=",
        peg$c621 = { type: "literal", value: "_delay=", description: "\"_delay=\"" },
        peg$c622 = function(digits, value) {
            var param = {}
            var name = "lfo" + digits.join("") + "_delay"
            param[name] = value
            return param
          },
        peg$c623 = "_amplitude=",
        peg$c624 = { type: "literal", value: "_amplitude=", description: "\"_amplitude=\"" },
        peg$c625 = function(digits, value) {
            var param = {}
            var name = "lfo" + digits.join("") + "_amplitude"
            param[name] = value
            return param
          },
        peg$c626 = function(digits, value) {
            var param = {}
            var name = "lfo" + digits.join("") + "_cutoff"
            param[name] = value
            return param
          },
        peg$c627 = "_phase=",
        peg$c628 = { type: "literal", value: "_phase=", description: "\"_phase=\"" },
        peg$c629 = function(digits, value) {
            var param = {}
            var name = "lfo" + digits.join("") + "_phase"
            param[name] = value
            return param
          },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInstrument();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c1(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseInstrument() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseSourceElements();
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c3(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSourceElements() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSourceElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c5(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSourceElement() {
      var s0;

      s0 = peg$parseComment();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHeader();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOpcodeDirective();
        }
      }

      return s0;
    }

    function peg$parseSourceCharacter() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }

      return s0;
    }

    function peg$parseHeader() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseGlobal();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMaster();
        if (s0 === peg$FAILED) {
          s0 = peg$parseRegion();
          if (s0 === peg$FAILED) {
            s0 = peg$parseGroup();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCurve();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAriaCustomHeader();
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }

      return s0;
    }

    function peg$parseGlobal() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c8) {
        s0 = peg$c8;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      return s0;
    }

    function peg$parseMaster() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c10) {
        s0 = peg$c10;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }

      return s0;
    }

    function peg$parseRegion() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c12) {
        s0 = peg$c12;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }

      return s0;
    }

    function peg$parseGroup() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c14) {
        s0 = peg$c14;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }

      return s0;
    }

    function peg$parseCurve() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c16) {
        s0 = peg$c16;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }

      return s0;
    }

    function peg$parseOpcodeDirective() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c19) {
        s1 = peg$c19;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFilepath();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c21(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c22) {
          s1 = peg$c22;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseMidiNoteValue();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c24(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c25) {
            s1 = peg$c25;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c27) {
              s2 = peg$c27;
              peg$currPos += 7;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c29) {
                s2 = peg$c29;
                peg$currPos += 8;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c30); }
              }
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c31(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 11) === peg$c32) {
              s1 = peg$c32;
              peg$currPos += 11;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c34) {
                s2 = peg$c34;
                peg$currPos += 6;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c36) {
                  s2 = peg$c36;
                  peg$currPos += 7;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c37); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c38) {
                    s2 = peg$c38;
                    peg$currPos += 5;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c40) {
                      s2 = peg$c40;
                      peg$currPos += 6;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c41); }
                    }
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c42(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 9) === peg$c43) {
                s1 = peg$c43;
                peg$currPos += 9;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
              }
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c45) {
                  s2 = peg$c45;
                  peg$currPos += 4;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c46); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c47) {
                    s2 = peg$c47;
                    peg$currPos += 6;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c48); }
                  }
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c49(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parseDelayCcDirective();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseOffsetCcDirective();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseLoopModeDirective();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsePitchLfoDepthCcDirective();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsePitchLfoFreqCcDirective();
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 9) === peg$c50) {
                            s1 = peg$c50;
                            peg$currPos += 9;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c51); }
                          }
                          if (s1 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c52) {
                              s2 = peg$c52;
                              peg$currPos += 6;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c53); }
                            }
                            if (s2 === peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c54) {
                                s2 = peg$c54;
                                peg$currPos += 6;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c55); }
                              }
                              if (s2 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c56) {
                                  s2 = peg$c56;
                                  peg$currPos += 6;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                }
                                if (s2 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 6) === peg$c58) {
                                    s2 = peg$c58;
                                    peg$currPos += 6;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                  }
                                  if (s2 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c60) {
                                      s2 = peg$c60;
                                      peg$currPos += 6;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c61); }
                                    }
                                    if (s2 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 6) === peg$c62) {
                                        s2 = peg$c62;
                                        peg$currPos += 6;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c63); }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            if (s2 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c64(s2);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseCutoffCcDirective();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseMidiNoteOpcodeDirective();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseFloatOpcodeDirective();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseIntegerOpcodeDirective();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseCurveOpcodeDirective();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseSequentialFloatDirective();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseSequentialIntegerDirective();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseAriaDefaultPathOpcode();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseAriaCustomTextOpcode();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseAriaCurveOpcode();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseFlexEgOpcode();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseLfoOpcode();
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }

      return s0;
    }

    function peg$parseMidiNoteOpcodeDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseMidiNoteOpcode();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMidiNoteValue();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFloatOpcodeDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFloatOpcode();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSignedDecimalLiteral();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseIntegerOpcodeDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseIntegerOpcode();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSignedIntegerAsNumber();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCurveOpcodeDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseCurveOpcode();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c68) {
            s3 = peg$c68;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c70) {
              s3 = peg$c70;
              peg$currPos += 5;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCurveOpcode() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c72) {
        s0 = peg$c72;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c74) {
          s0 = peg$c74;
          peg$currPos += 11;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c76) {
            s0 = peg$c76;
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
        }
      }

      return s0;
    }

    function peg$parseMidiNoteOpcode() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c79) {
        s0 = peg$c79;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c81) {
          s0 = peg$c81;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c82); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 15) === peg$c83) {
            s0 = peg$c83;
            peg$currPos += 15;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c85) {
              s0 = peg$c85;
              peg$currPos += 8;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c86); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c87) {
                s0 = peg$c87;
                peg$currPos += 8;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c88); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c89) {
                  s0 = peg$c89;
                  peg$currPos += 7;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c90); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c91) {
                    s0 = peg$c91;
                    peg$currPos += 7;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c92); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c93) {
                      s0 = peg$c93;
                      peg$currPos += 5;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c94); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 11) === peg$c95) {
                        s0 = peg$c95;
                        peg$currPos += 11;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c96); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 13) === peg$c97) {
                          s0 = peg$c97;
                          peg$currPos += 13;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c98); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 11) === peg$c99) {
                            s0 = peg$c99;
                            peg$currPos += 11;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c100); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }

      return s0;
    }

    function peg$parseFloatOpcode() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 12) === peg$c102) {
        s0 = peg$c102;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c104) {
          s0 = peg$c104;
          peg$currPos += 11;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c105); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c106) {
            s0 = peg$c106;
            peg$currPos += 11;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c107); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 14) === peg$c108) {
              s0 = peg$c108;
              peg$currPos += 14;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c109); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 14) === peg$c110) {
                s0 = peg$c110;
                peg$currPos += 14;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c111); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c112) {
                  s0 = peg$c112;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c113); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c114) {
                    s0 = peg$c114;
                    peg$currPos += 6;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c115); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c116) {
                      s0 = peg$c116;
                      peg$currPos += 7;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c117); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c118) {
                        s0 = peg$c118;
                        peg$currPos += 7;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c119); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c120) {
                          s0 = peg$c120;
                          peg$currPos += 5;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c121); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c122) {
                            s0 = peg$c122;
                            peg$currPos += 5;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c123); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 12) === peg$c124) {
                              s0 = peg$c124;
                              peg$currPos += 12;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c125); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 9) === peg$c126) {
                                s0 = peg$c126;
                                peg$currPos += 9;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c127); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 9) === peg$c128) {
                                  s0 = peg$c128;
                                  peg$currPos += 9;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c129); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c130) {
                                    s0 = peg$c130;
                                    peg$currPos += 5;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c131); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 10) === peg$c132) {
                                      s0 = peg$c132;
                                      peg$currPos += 10;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c133); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 11) === peg$c134) {
                                        s0 = peg$c134;
                                        peg$currPos += 11;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c135); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 13) === peg$c136) {
                                          s0 = peg$c136;
                                          peg$currPos += 13;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c137); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 13) === peg$c138) {
                                            s0 = peg$c138;
                                            peg$currPos += 13;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c139); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 14) === peg$c140) {
                                              s0 = peg$c140;
                                              peg$currPos += 14;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c141); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 12) === peg$c142) {
                                                s0 = peg$c142;
                                                peg$currPos += 12;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c143); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 13) === peg$c144) {
                                                  s0 = peg$c144;
                                                  peg$currPos += 13;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c145); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 15) === peg$c146) {
                                                    s0 = peg$c146;
                                                    peg$currPos += 15;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c147); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 15) === peg$c148) {
                                                      s0 = peg$c148;
                                                      peg$currPos += 15;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c149); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 17) === peg$c150) {
                                                        s0 = peg$c150;
                                                        peg$currPos += 17;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c151); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 18) === peg$c152) {
                                                          s0 = peg$c152;
                                                          peg$currPos += 18;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c153); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 16) === peg$c154) {
                                                            s0 = peg$c154;
                                                            peg$currPos += 16;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c155); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 17) === peg$c156) {
                                                              s0 = peg$c156;
                                                              peg$currPos += 17;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c157); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 19) === peg$c158) {
                                                                s0 = peg$c158;
                                                                peg$currPos += 19;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c159); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 14) === peg$c160) {
                                                                  s0 = peg$c160;
                                                                  peg$currPos += 14;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c161); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 13) === peg$c162) {
                                                                    s0 = peg$c162;
                                                                    peg$currPos += 13;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c163); }
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 16) === peg$c164) {
                                                                      s0 = peg$c164;
                                                                      peg$currPos += 16;
                                                                    } else {
                                                                      s0 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c165); }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 17) === peg$c166) {
                                                                        s0 = peg$c166;
                                                                        peg$currPos += 17;
                                                                      } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c167); }
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 20) === peg$c168) {
                                                                          s0 = peg$c168;
                                                                          peg$currPos += 20;
                                                                        } else {
                                                                          s0 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c169); }
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 20) === peg$c170) {
                                                                            s0 = peg$c170;
                                                                            peg$currPos += 20;
                                                                          } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c171); }
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 13) === peg$c172) {
                                                                              s0 = peg$c172;
                                                                              peg$currPos += 13;
                                                                            } else {
                                                                              s0 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c173); }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 6) === peg$c174) {
                                                                                s0 = peg$c174;
                                                                                peg$currPos += 6;
                                                                              } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c175); }
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 9) === peg$c176) {
                                                                                  s0 = peg$c176;
                                                                                  peg$currPos += 9;
                                                                                } else {
                                                                                  s0 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c177); }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 11) === peg$c178) {
                                                                                    s0 = peg$c178;
                                                                                    peg$currPos += 11;
                                                                                  } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 11) === peg$c180) {
                                                                                      s0 = peg$c180;
                                                                                      peg$currPos += 11;
                                                                                    } else {
                                                                                      s0 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c181); }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 12) === peg$c182) {
                                                                                        s0 = peg$c182;
                                                                                        peg$currPos += 12;
                                                                                      } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c183); }
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 10) === peg$c184) {
                                                                                          s0 = peg$c184;
                                                                                          peg$currPos += 10;
                                                                                        } else {
                                                                                          s0 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c185); }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 11) === peg$c186) {
                                                                                            s0 = peg$c186;
                                                                                            peg$currPos += 11;
                                                                                          } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c187); }
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 13) === peg$c188) {
                                                                                              s0 = peg$c188;
                                                                                              peg$currPos += 13;
                                                                                            } else {
                                                                                              s0 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c189); }
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              if (input.substr(peg$currPos, 13) === peg$c190) {
                                                                                                s0 = peg$c190;
                                                                                                peg$currPos += 13;
                                                                                              } else {
                                                                                                s0 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c191); }
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 15) === peg$c192) {
                                                                                                  s0 = peg$c192;
                                                                                                  peg$currPos += 15;
                                                                                                } else {
                                                                                                  s0 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c193); }
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  if (input.substr(peg$currPos, 16) === peg$c194) {
                                                                                                    s0 = peg$c194;
                                                                                                    peg$currPos += 16;
                                                                                                  } else {
                                                                                                    s0 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c195); }
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 14) === peg$c196) {
                                                                                                      s0 = peg$c196;
                                                                                                      peg$currPos += 14;
                                                                                                    } else {
                                                                                                      s0 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c197); }
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      if (input.substr(peg$currPos, 15) === peg$c198) {
                                                                                                        s0 = peg$c198;
                                                                                                        peg$currPos += 15;
                                                                                                      } else {
                                                                                                        s0 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c199); }
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 17) === peg$c200) {
                                                                                                          s0 = peg$c200;
                                                                                                          peg$currPos += 17;
                                                                                                        } else {
                                                                                                          s0 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c201); }
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          if (input.substr(peg$currPos, 17) === peg$c202) {
                                                                                                            s0 = peg$c202;
                                                                                                            peg$currPos += 17;
                                                                                                          } else {
                                                                                                            s0 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c203); }
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 6) === peg$c204) {
                                                                                                              s0 = peg$c204;
                                                                                                              peg$currPos += 6;
                                                                                                            } else {
                                                                                                              s0 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c205); }
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              if (input.substr(peg$currPos, 3) === peg$c206) {
                                                                                                                s0 = peg$c206;
                                                                                                                peg$currPos += 3;
                                                                                                              } else {
                                                                                                                s0 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c207); }
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 5) === peg$c208) {
                                                                                                                  s0 = peg$c208;
                                                                                                                  peg$currPos += 5;
                                                                                                                } else {
                                                                                                                  s0 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c209); }
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  if (input.substr(peg$currPos, 8) === peg$c210) {
                                                                                                                    s0 = peg$c210;
                                                                                                                    peg$currPos += 8;
                                                                                                                  } else {
                                                                                                                    s0 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c211); }
                                                                                                                  }
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    if (input.substr(peg$currPos, 12) === peg$c212) {
                                                                                                                      s0 = peg$c212;
                                                                                                                      peg$currPos += 12;
                                                                                                                    } else {
                                                                                                                      s0 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c213); }
                                                                                                                    }
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      if (input.substr(peg$currPos, 12) === peg$c214) {
                                                                                                                        s0 = peg$c214;
                                                                                                                        peg$currPos += 12;
                                                                                                                      } else {
                                                                                                                        s0 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c215); }
                                                                                                                      }
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        if (input.substr(peg$currPos, 14) === peg$c216) {
                                                                                                                          s0 = peg$c216;
                                                                                                                          peg$currPos += 14;
                                                                                                                        } else {
                                                                                                                          s0 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c217); }
                                                                                                                        }
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          if (input.substr(peg$currPos, 16) === peg$c218) {
                                                                                                                            s0 = peg$c218;
                                                                                                                            peg$currPos += 16;
                                                                                                                          } else {
                                                                                                                            s0 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c219); }
                                                                                                                          }
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            if (input.substr(peg$currPos, 10) === peg$c220) {
                                                                                                                              s0 = peg$c220;
                                                                                                                              peg$currPos += 10;
                                                                                                                            } else {
                                                                                                                              s0 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c221); }
                                                                                                                            }
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              if (input.substr(peg$currPos, 8) === peg$c222) {
                                                                                                                                s0 = peg$c222;
                                                                                                                                peg$currPos += 8;
                                                                                                                              } else {
                                                                                                                                s0 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c223); }
                                                                                                                              }
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                if (input.substr(peg$currPos, 11) === peg$c224) {
                                                                                                                                  s0 = peg$c224;
                                                                                                                                  peg$currPos += 11;
                                                                                                                                } else {
                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c225); }
                                                                                                                                }
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  if (input.substr(peg$currPos, 11) === peg$c226) {
                                                                                                                                    s0 = peg$c226;
                                                                                                                                    peg$currPos += 11;
                                                                                                                                  } else {
                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c227); }
                                                                                                                                  }
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    if (input.substr(peg$currPos, 12) === peg$c228) {
                                                                                                                                      s0 = peg$c228;
                                                                                                                                      peg$currPos += 12;
                                                                                                                                    } else {
                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c229); }
                                                                                                                                    }
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      if (input.substr(peg$currPos, 10) === peg$c230) {
                                                                                                                                        s0 = peg$c230;
                                                                                                                                        peg$currPos += 10;
                                                                                                                                      } else {
                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c231); }
                                                                                                                                      }
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        if (input.substr(peg$currPos, 11) === peg$c232) {
                                                                                                                                          s0 = peg$c232;
                                                                                                                                          peg$currPos += 11;
                                                                                                                                        } else {
                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c233); }
                                                                                                                                        }
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          if (input.substr(peg$currPos, 13) === peg$c234) {
                                                                                                                                            s0 = peg$c234;
                                                                                                                                            peg$currPos += 13;
                                                                                                                                          } else {
                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c235); }
                                                                                                                                          }
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            if (input.substr(peg$currPos, 13) === peg$c236) {
                                                                                                                                              s0 = peg$c236;
                                                                                                                                              peg$currPos += 13;
                                                                                                                                            } else {
                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c237); }
                                                                                                                                            }
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              if (input.substr(peg$currPos, 15) === peg$c238) {
                                                                                                                                                s0 = peg$c238;
                                                                                                                                                peg$currPos += 15;
                                                                                                                                              } else {
                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c239); }
                                                                                                                                              }
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                if (input.substr(peg$currPos, 16) === peg$c240) {
                                                                                                                                                  s0 = peg$c240;
                                                                                                                                                  peg$currPos += 16;
                                                                                                                                                } else {
                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c241); }
                                                                                                                                                }
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  if (input.substr(peg$currPos, 14) === peg$c242) {
                                                                                                                                                    s0 = peg$c242;
                                                                                                                                                    peg$currPos += 14;
                                                                                                                                                  } else {
                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c243); }
                                                                                                                                                  }
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    if (input.substr(peg$currPos, 15) === peg$c244) {
                                                                                                                                                      s0 = peg$c244;
                                                                                                                                                      peg$currPos += 15;
                                                                                                                                                    } else {
                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c245); }
                                                                                                                                                    }
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      if (input.substr(peg$currPos, 17) === peg$c246) {
                                                                                                                                                        s0 = peg$c246;
                                                                                                                                                        peg$currPos += 17;
                                                                                                                                                      } else {
                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c247); }
                                                                                                                                                      }
                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                        if (input.substr(peg$currPos, 17) === peg$c248) {
                                                                                                                                                          s0 = peg$c248;
                                                                                                                                                          peg$currPos += 17;
                                                                                                                                                        } else {
                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c249); }
                                                                                                                                                        }
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                          if (input.substr(peg$currPos, 12) === peg$c250) {
                                                                                                                                                            s0 = peg$c250;
                                                                                                                                                            peg$currPos += 12;
                                                                                                                                                          } else {
                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c251); }
                                                                                                                                                          }
                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                            if (input.substr(peg$currPos, 11) === peg$c252) {
                                                                                                                                                              s0 = peg$c252;
                                                                                                                                                              peg$currPos += 11;
                                                                                                                                                            } else {
                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c253); }
                                                                                                                                                            }
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                              if (input.substr(peg$currPos, 19) === peg$c254) {
                                                                                                                                                                s0 = peg$c254;
                                                                                                                                                                peg$currPos += 19;
                                                                                                                                                              } else {
                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c255); }
                                                                                                                                                              }
                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                if (input.substr(peg$currPos, 19) === peg$c256) {
                                                                                                                                                                  s0 = peg$c256;
                                                                                                                                                                  peg$currPos += 19;
                                                                                                                                                                } else {
                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c257); }
                                                                                                                                                                }
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                  if (input.substr(peg$currPos, 12) === peg$c258) {
                                                                                                                                                                    s0 = peg$c258;
                                                                                                                                                                    peg$currPos += 12;
                                                                                                                                                                  } else {
                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c259); }
                                                                                                                                                                  }
                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                    if (input.substr(peg$currPos, 18) === peg$c260) {
                                                                                                                                                                      s0 = peg$c260;
                                                                                                                                                                      peg$currPos += 18;
                                                                                                                                                                    } else {
                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c261); }
                                                                                                                                                                    }
                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                      if (input.substr(peg$currPos, 18) === peg$c262) {
                                                                                                                                                                        s0 = peg$c262;
                                                                                                                                                                        peg$currPos += 18;
                                                                                                                                                                      } else {
                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c263); }
                                                                                                                                                                      }
                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                        if (input.substr(peg$currPos, 11) === peg$c264) {
                                                                                                                                                                          s0 = peg$c264;
                                                                                                                                                                          peg$currPos += 11;
                                                                                                                                                                        } else {
                                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c265); }
                                                                                                                                                                        }
                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                          if (input.substr(peg$currPos, 8) === peg$c266) {
                                                                                                                                                                            s0 = peg$c266;
                                                                                                                                                                            peg$currPos += 8;
                                                                                                                                                                          } else {
                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c267); }
                                                                                                                                                                          }
                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                            if (input.substr(peg$currPos, 8) === peg$c268) {
                                                                                                                                                                              s0 = peg$c268;
                                                                                                                                                                              peg$currPos += 8;
                                                                                                                                                                            } else {
                                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c269); }
                                                                                                                                                                            }
                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                              if (input.substr(peg$currPos, 8) === peg$c270) {
                                                                                                                                                                                s0 = peg$c270;
                                                                                                                                                                                peg$currPos += 8;
                                                                                                                                                                              } else {
                                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c271); }
                                                                                                                                                                              }
                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                if (input.substr(peg$currPos, 12) === peg$c272) {
                                                                                                                                                                                  s0 = peg$c272;
                                                                                                                                                                                  peg$currPos += 12;
                                                                                                                                                                                } else {
                                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c273); }
                                                                                                                                                                                }
                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                  if (input.substr(peg$currPos, 12) === peg$c274) {
                                                                                                                                                                                    s0 = peg$c274;
                                                                                                                                                                                    peg$currPos += 12;
                                                                                                                                                                                  } else {
                                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c275); }
                                                                                                                                                                                  }
                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                    if (input.substr(peg$currPos, 12) === peg$c276) {
                                                                                                                                                                                      s0 = peg$c276;
                                                                                                                                                                                      peg$currPos += 12;
                                                                                                                                                                                    } else {
                                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c277); }
                                                                                                                                                                                    }
                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                      if (input.substr(peg$currPos, 6) === peg$c278) {
                                                                                                                                                                                        s0 = peg$c278;
                                                                                                                                                                                        peg$currPos += 6;
                                                                                                                                                                                      } else {
                                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c279); }
                                                                                                                                                                                      }
                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                        if (input.substr(peg$currPos, 6) === peg$c280) {
                                                                                                                                                                                          s0 = peg$c280;
                                                                                                                                                                                          peg$currPos += 6;
                                                                                                                                                                                        } else {
                                                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c281); }
                                                                                                                                                                                        }
                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                          if (input.substr(peg$currPos, 6) === peg$c282) {
                                                                                                                                                                                            s0 = peg$c282;
                                                                                                                                                                                            peg$currPos += 6;
                                                                                                                                                                                          } else {
                                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c283); }
                                                                                                                                                                                          }
                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                            if (input.substr(peg$currPos, 8) === peg$c284) {
                                                                                                                                                                                              s0 = peg$c284;
                                                                                                                                                                                              peg$currPos += 8;
                                                                                                                                                                                            } else {
                                                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c285); }
                                                                                                                                                                                            }
                                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                              if (input.substr(peg$currPos, 8) === peg$c286) {
                                                                                                                                                                                                s0 = peg$c286;
                                                                                                                                                                                                peg$currPos += 8;
                                                                                                                                                                                              } else {
                                                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c287); }
                                                                                                                                                                                              }
                                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                                if (input.substr(peg$currPos, 8) === peg$c288) {
                                                                                                                                                                                                  s0 = peg$c288;
                                                                                                                                                                                                  peg$currPos += 8;
                                                                                                                                                                                                } else {
                                                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c289); }
                                                                                                                                                                                                }
                                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                                  if (input.substr(peg$currPos, 12) === peg$c290) {
                                                                                                                                                                                                    s0 = peg$c290;
                                                                                                                                                                                                    peg$currPos += 12;
                                                                                                                                                                                                  } else {
                                                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c291); }
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                                                    if (input.substr(peg$currPos, 12) === peg$c292) {
                                                                                                                                                                                                      s0 = peg$c292;
                                                                                                                                                                                                      peg$currPos += 12;
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c293); }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                                                      if (input.substr(peg$currPos, 12) === peg$c294) {
                                                                                                                                                                                                        s0 = peg$c294;
                                                                                                                                                                                                        peg$currPos += 12;
                                                                                                                                                                                                      } else {
                                                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c295); }
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                                                        if (input.substr(peg$currPos, 7) === peg$c296) {
                                                                                                                                                                                                          s0 = peg$c296;
                                                                                                                                                                                                          peg$currPos += 7;
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c297); }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                                                          if (input.substr(peg$currPos, 7) === peg$c298) {
                                                                                                                                                                                                            s0 = peg$c298;
                                                                                                                                                                                                            peg$currPos += 7;
                                                                                                                                                                                                          } else {
                                                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c299); }
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                                                            s0 = peg$parseAriaCustomFloatOpcode();
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }

      return s0;
    }

    function peg$parseIntegerOpcode() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 15) === peg$c301) {
        s0 = peg$c301;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c303) {
          s0 = peg$c303;
          peg$currPos += 16;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c304); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 18) === peg$c305) {
            s0 = peg$c305;
            peg$currPos += 18;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c306); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 18) === peg$c307) {
              s0 = peg$c307;
              peg$currPos += 18;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c308); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 18) === peg$c305) {
                s0 = peg$c305;
                peg$currPos += 18;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c306); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 18) === peg$c307) {
                  s0 = peg$c307;
                  peg$currPos += 18;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c308); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 12) === peg$c309) {
                    s0 = peg$c309;
                    peg$currPos += 12;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c310); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c311) {
                      s0 = peg$c311;
                      peg$currPos += 5;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c312); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c313) {
                        s0 = peg$c313;
                        peg$currPos += 5;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c314); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c315) {
                          s0 = peg$c315;
                          peg$currPos += 6;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c316); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c317) {
                            s0 = peg$c317;
                            peg$currPos += 6;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c318); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 9) === peg$c319) {
                              s0 = peg$c319;
                              peg$currPos += 9;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c320); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 9) === peg$c321) {
                                s0 = peg$c321;
                                peg$currPos += 9;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c322); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c323) {
                                  s0 = peg$c323;
                                  peg$currPos += 6;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c324); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 6) === peg$c325) {
                                    s0 = peg$c325;
                                    peg$currPos += 6;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c326); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c327) {
                                      s0 = peg$c327;
                                      peg$currPos += 6;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c328); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 6) === peg$c329) {
                                        s0 = peg$c329;
                                        peg$currPos += 6;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c330); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 9) === peg$c331) {
                                          s0 = peg$c331;
                                          peg$currPos += 9;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c332); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 9) === peg$c333) {
                                            s0 = peg$c333;
                                            peg$currPos += 9;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c334); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 10) === peg$c335) {
                                              s0 = peg$c335;
                                              peg$currPos += 10;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c336); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 12) === peg$c337) {
                                                s0 = peg$c337;
                                                peg$currPos += 12;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c338); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 5) === peg$c339) {
                                                  s0 = peg$c339;
                                                  peg$currPos += 5;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c340); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 6) === peg$c341) {
                                                    s0 = peg$c341;
                                                    peg$currPos += 6;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c342); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 13) === peg$c343) {
                                                      s0 = peg$c343;
                                                      peg$currPos += 13;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c344); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 10) === peg$c345) {
                                                        s0 = peg$c345;
                                                        peg$currPos += 10;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c346); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 11) === peg$c347) {
                                                          s0 = peg$c347;
                                                          peg$currPos += 11;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c348); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 6) === peg$c349) {
                                                            s0 = peg$c349;
                                                            peg$currPos += 6;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c350); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 3) === peg$c351) {
                                                              s0 = peg$c351;
                                                              peg$currPos += 3;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c352); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 5) === peg$c353) {
                                                                s0 = peg$c353;
                                                                peg$currPos += 5;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c354); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 10) === peg$c355) {
                                                                  s0 = peg$c355;
                                                                  peg$currPos += 10;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c356); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 8) === peg$c357) {
                                                                    s0 = peg$c357;
                                                                    peg$currPos += 8;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c358); }
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 9) === peg$c359) {
                                                                      s0 = peg$c359;
                                                                      peg$currPos += 9;
                                                                    } else {
                                                                      s0 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c360); }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 4) === peg$c361) {
                                                                        s0 = peg$c361;
                                                                        peg$currPos += 4;
                                                                      } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c362); }
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 4) === peg$c361) {
                                                                          s0 = peg$c361;
                                                                          peg$currPos += 4;
                                                                        } else {
                                                                          s0 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c362); }
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 14) === peg$c363) {
                                                                            s0 = peg$c363;
                                                                            peg$currPos += 14;
                                                                          } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c364); }
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 14) === peg$c365) {
                                                                              s0 = peg$c365;
                                                                              peg$currPos += 14;
                                                                            } else {
                                                                              s0 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c366); }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 12) === peg$c367) {
                                                                                s0 = peg$c367;
                                                                                peg$currPos += 12;
                                                                              } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c368); }
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 7) === peg$c369) {
                                                                                  s0 = peg$c369;
                                                                                  peg$currPos += 7;
                                                                                } else {
                                                                                  s0 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c370); }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 9) === peg$c371) {
                                                                                    s0 = peg$c371;
                                                                                    peg$currPos += 9;
                                                                                  } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c372); }
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 13) === peg$c373) {
                                                                                      s0 = peg$c373;
                                                                                      peg$currPos += 13;
                                                                                    } else {
                                                                                      s0 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c374); }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 11) === peg$c375) {
                                                                                        s0 = peg$c375;
                                                                                        peg$currPos += 11;
                                                                                      } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c376); }
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 15) === peg$c377) {
                                                                                          s0 = peg$c377;
                                                                                          peg$currPos += 15;
                                                                                        } else {
                                                                                          s0 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c378); }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 12) === peg$c379) {
                                                                                            s0 = peg$c379;
                                                                                            peg$currPos += 12;
                                                                                          } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c380); }
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 13) === peg$c381) {
                                                                                              s0 = peg$c381;
                                                                                              peg$currPos += 13;
                                                                                            } else {
                                                                                              s0 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c382); }
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              if (input.substr(peg$currPos, 12) === peg$c383) {
                                                                                                s0 = peg$c383;
                                                                                                peg$currPos += 12;
                                                                                              } else {
                                                                                                s0 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c384); }
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 10) === peg$c385) {
                                                                                                  s0 = peg$c385;
                                                                                                  peg$currPos += 10;
                                                                                                } else {
                                                                                                  s0 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c386); }
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  if (input.substr(peg$currPos, 10) === peg$c387) {
                                                                                                    s0 = peg$c387;
                                                                                                    peg$currPos += 10;
                                                                                                  } else {
                                                                                                    s0 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c388); }
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 10) === peg$c389) {
                                                                                                      s0 = peg$c389;
                                                                                                      peg$currPos += 10;
                                                                                                    } else {
                                                                                                      s0 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c390); }
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      if (input.substr(peg$currPos, 14) === peg$c391) {
                                                                                                        s0 = peg$c391;
                                                                                                        peg$currPos += 14;
                                                                                                      } else {
                                                                                                        s0 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c392); }
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 14) === peg$c393) {
                                                                                                          s0 = peg$c393;
                                                                                                          peg$currPos += 14;
                                                                                                        } else {
                                                                                                          s0 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c394); }
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          if (input.substr(peg$currPos, 17) === peg$c395) {
                                                                                                            s0 = peg$c395;
                                                                                                            peg$currPos += 17;
                                                                                                          } else {
                                                                                                            s0 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c396); }
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 18) === peg$c397) {
                                                                                                              s0 = peg$c397;
                                                                                                              peg$currPos += 18;
                                                                                                            } else {
                                                                                                              s0 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c398); }
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              if (input.substr(peg$currPos, 21) === peg$c399) {
                                                                                                                s0 = peg$c399;
                                                                                                                peg$currPos += 21;
                                                                                                              } else {
                                                                                                                s0 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c400); }
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 21) === peg$c401) {
                                                                                                                  s0 = peg$c401;
                                                                                                                  peg$currPos += 21;
                                                                                                                } else {
                                                                                                                  s0 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c402); }
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  if (input.substr(peg$currPos, 14) === peg$c403) {
                                                                                                                    s0 = peg$c403;
                                                                                                                    peg$currPos += 14;
                                                                                                                  } else {
                                                                                                                    s0 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c404); }
                                                                                                                  }
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    if (input.substr(peg$currPos, 17) === peg$c405) {
                                                                                                                      s0 = peg$c405;
                                                                                                                      peg$currPos += 17;
                                                                                                                    } else {
                                                                                                                      s0 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c406); }
                                                                                                                    }
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      if (input.substr(peg$currPos, 13) === peg$c407) {
                                                                                                                        s0 = peg$c407;
                                                                                                                        peg$currPos += 13;
                                                                                                                      } else {
                                                                                                                        s0 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c408); }
                                                                                                                      }
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        if (input.substr(peg$currPos, 6) === peg$c409) {
                                                                                                                          s0 = peg$c409;
                                                                                                                          peg$currPos += 6;
                                                                                                                        } else {
                                                                                                                          s0 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c410); }
                                                                                                                        }
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          if (input.substr(peg$currPos, 10) === peg$c411) {
                                                                                                                            s0 = peg$c411;
                                                                                                                            peg$currPos += 10;
                                                                                                                          } else {
                                                                                                                            s0 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c412); }
                                                                                                                          }
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            if (input.substr(peg$currPos, 10) === peg$c413) {
                                                                                                                              s0 = peg$c413;
                                                                                                                              peg$currPos += 10;
                                                                                                                            } else {
                                                                                                                              s0 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c414); }
                                                                                                                            }
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              if (input.substr(peg$currPos, 10) === peg$c415) {
                                                                                                                                s0 = peg$c415;
                                                                                                                                peg$currPos += 10;
                                                                                                                              } else {
                                                                                                                                s0 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c416); }
                                                                                                                              }
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                if (input.substr(peg$currPos, 10) === peg$c417) {
                                                                                                                                  s0 = peg$c417;
                                                                                                                                  peg$currPos += 10;
                                                                                                                                } else {
                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c418); }
                                                                                                                                }
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  if (input.substr(peg$currPos, 11) === peg$c419) {
                                                                                                                                    s0 = peg$c419;
                                                                                                                                    peg$currPos += 11;
                                                                                                                                  } else {
                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c420); }
                                                                                                                                  }
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    if (input.substr(peg$currPos, 11) === peg$c421) {
                                                                                                                                      s0 = peg$c421;
                                                                                                                                      peg$currPos += 11;
                                                                                                                                    } else {
                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c422); }
                                                                                                                                    }
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$parseAriaCustomIntegerOpcode();
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c300); }
      }

      return s0;
    }

    function peg$parseSequentialFloatDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseSequentialFloatOpcode();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSignedIntegerAsNumber();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c423(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSignedDecimalLiteral();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSequentialIntegerDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseSequentialIntegerOpcode();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSignedIntegerAsNumber();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c423(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSignedDecimalLiteral();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSequentialFloatOpcode() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 13) === peg$c425) {
        s0 = peg$c425;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c426); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c427) {
          s0 = peg$c427;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c428); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 13) === peg$c429) {
            s0 = peg$c429;
            peg$currPos += 13;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c430); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 13) === peg$c431) {
              s0 = peg$c431;
              peg$currPos += 13;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c432); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 14) === peg$c433) {
                s0 = peg$c433;
                peg$currPos += 14;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c434); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 12) === peg$c435) {
                  s0 = peg$c435;
                  peg$currPos += 12;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c436); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 13) === peg$c437) {
                    s0 = peg$c437;
                    peg$currPos += 13;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c438); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 15) === peg$c439) {
                      s0 = peg$c439;
                      peg$currPos += 15;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c440); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 15) === peg$c441) {
                        s0 = peg$c441;
                        peg$currPos += 15;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c442); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 14) === peg$c443) {
                          s0 = peg$c443;
                          peg$currPos += 14;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c444); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 13) === peg$c445) {
                            s0 = peg$c445;
                            peg$currPos += 13;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c446); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 10) === peg$c447) {
                              s0 = peg$c447;
                              peg$currPos += 10;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c448); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 10) === peg$c449) {
                                s0 = peg$c449;
                                peg$currPos += 10;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c450); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 10) === peg$c451) {
                                  s0 = peg$c451;
                                  peg$currPos += 10;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c452); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 8) === peg$c453) {
                                    s0 = peg$c453;
                                    peg$currPos += 8;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c454); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 8) === peg$c455) {
                                      s0 = peg$c455;
                                      peg$currPos += 8;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c456); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 8) === peg$c457) {
                                        s0 = peg$c457;
                                        peg$currPos += 8;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c458); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 10) === peg$c459) {
                                          s0 = peg$c459;
                                          peg$currPos += 10;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c460); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 10) === peg$c461) {
                                            s0 = peg$c461;
                                            peg$currPos += 10;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c462); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 10) === peg$c463) {
                                              s0 = peg$c463;
                                              peg$currPos += 10;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c464); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 13) === peg$c465) {
                                                s0 = peg$c465;
                                                peg$currPos += 13;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c466); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 13) === peg$c465) {
                                                  s0 = peg$c465;
                                                  peg$currPos += 13;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c466); }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c424); }
      }

      return s0;
    }

    function peg$parseSequentialIntegerOpcode() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c467) {
        s0 = peg$c467;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c468); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c469) {
          s0 = peg$c469;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c470); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c471) {
            s0 = peg$c471;
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c472); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c473) {
              s0 = peg$c473;
              peg$currPos += 10;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c474); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c475) {
                s0 = peg$c475;
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c476); }
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parseAriaCustomSequentialIntegerOpcode();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseDelayCcDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c477) {
        s2 = peg$c477;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c478); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSignedIntegerAsNumber();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c423(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSignedDecimalLiteral();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOffsetCcDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c479) {
        s2 = peg$c479;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c480); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSignedIntegerAsNumber();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c423(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSignedIntegerAsNumber();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePitchLfoDepthCcDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c481) {
        s2 = peg$c481;
        peg$currPos += 16;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c482); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSignedIntegerAsNumber();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c423(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSignedIntegerAsNumber();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePitchLfoFreqCcDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c483) {
        s2 = peg$c483;
        peg$currPos += 15;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c484); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSignedIntegerAsNumber();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c423(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSignedDecimalLiteral();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCutoffCcDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c485) {
        s2 = peg$c485;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c486); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSignedIntegerAsNumber();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c423(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSignedIntegerAsNumber();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLoopModeDirective() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c487) {
        s1 = peg$c487;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c488); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c489) {
            s3 = peg$c489;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c490); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c491) {
              s3 = peg$c491;
              peg$currPos += 8;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c492); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 15) === peg$c493) {
                s3 = peg$c493;
                peg$currPos += 15;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c494); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 12) === peg$c495) {
                  s3 = peg$c495;
                  peg$currPos += 12;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c496); }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c497(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMidiNoteValue() {
      var s0;

      s0 = peg$parseSignedIntegerAsNumber();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMidiNoteName();
      }

      return s0;
    }

    function peg$parseDecimalDigits() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseDecimalDigit();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseDecimalDigit();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDecimalDigit() {
      var s0;

      if (peg$c498.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c499); }
      }

      return s0;
    }

    function peg$parseNonZeroDigit() {
      var s0;

      if (peg$c500.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c501); }
      }

      return s0;
    }

    function peg$parseExponentPart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseExponentIndicator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSignedInteger();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseExponentIndicator() {
      var s0;

      if (peg$c502.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c503); }
      }

      return s0;
    }

    function peg$parseSignedInteger() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c504.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c505); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSignedIntegerAsNumber() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c504.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c505); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c506(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDecimalLiteral() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseDecimalIntegerLiteral();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c507;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c508); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDecimalDigits();
          if (s5 === peg$FAILED) {
            s5 = peg$c2;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseExponentPart();
            if (s6 === peg$FAILED) {
              s6 = peg$c2;
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c509(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c507;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c508); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDecimalDigits();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExponentPart();
            if (s5 === peg$FAILED) {
              s5 = peg$c2;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s2 = input.substring(s1, peg$currPos);
        }
        s1 = s2;
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c510(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$currPos;
          s3 = peg$parseDecimalIntegerLiteral();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExponentPart();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s2 = input.substring(s1, peg$currPos);
          }
          s1 = s2;
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c510(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseDecimalIntegerLiteral() {
      var s0, s1, s2;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c511;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c512); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNonZeroDigit();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDecimalDigits();
          if (s2 === peg$FAILED) {
            s2 = peg$c2;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseSignedDecimalLiteral() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c504.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c505); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalLiteral();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c513(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMidiNoteName() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseMidiPitch();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMidiAccidental();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSignedIntegerAsNumber();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMidiPitch() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c515.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c516); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c517(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMidiAccidental() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c518.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c519); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c520(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFilepath() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseFilename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFileExtension();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c521(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFilename() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseFileExtension();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c522;
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseSourceCharacter();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c523(s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseFileExtension();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c522;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSourceCharacter();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c523(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c524(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePath() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c525) {
        s0 = peg$c525;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c526); }
      }

      return s0;
    }

    function peg$parseFileExtension() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c527) {
        s0 = peg$c527;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c528); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c529) {
          s0 = peg$c529;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c530); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c531) {
            s0 = peg$c531;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c532); }
          }
        }
      }

      return s0;
    }

    function peg$parseWhiteSpace() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c534.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c535); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseZs();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c533); }
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0;

      if (peg$c536.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c537); }
      }

      return s0;
    }

    function peg$parseLineTerminatorSequence() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c539;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c540); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c541) {
          s0 = peg$c541;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c542); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c543;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c544); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c545;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c546); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c547;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c548); }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c538); }
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseMultiLineComment();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSingleLineComment();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c549); }
      }

      return s0;
    }

    function peg$parseMultiLineComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c550) {
        s1 = peg$c550;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c551); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c552) {
          s5 = peg$c552;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c553); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c522;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c552) {
            s5 = peg$c552;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c553); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c522;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c552) {
            s3 = peg$c552;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c553); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMultiLineCommentNoLineTerminator() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c550) {
        s1 = peg$c550;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c551); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c552) {
          s5 = peg$c552;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c553); }
        }
        if (s5 === peg$FAILED) {
          s5 = peg$parseLineTerminator();
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c522;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c552) {
            s5 = peg$c552;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c553); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseLineTerminator();
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c522;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c552) {
            s3 = peg$c552;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c553); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSingleLineComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c554) {
        s1 = peg$c554;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c555); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c522;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseLineTerminator();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c522;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseZs() {
      var s0;

      if (peg$c556.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c557); }
      }

      return s0;
    }

    function peg$parseEOS() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c558;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c559); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLineTerminatorSequence();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c560;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c561); }
            }
            peg$silentFails--;
            if (s3 !== peg$FAILED) {
              peg$currPos = s2;
              s2 = peg$c522;
            } else {
              s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse__();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEOF();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseEOSNoLineTerminator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c558;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c559); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLineTerminatorSequence();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c560;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c561); }
            }
            peg$silentFails--;
            if (s3 !== peg$FAILED) {
              peg$currPos = s2;
              s2 = peg$c522;
            } else {
              s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEOF();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1;

      s0 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      peg$silentFails--;
      if (s1 === peg$FAILED) {
        s0 = peg$c522;
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseWhiteSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseMultiLineCommentNoLineTerminator();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSingleLineComment();
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();
        if (s1 === peg$FAILED) {
          s1 = peg$parseMultiLineCommentNoLineTerminator();
          if (s1 === peg$FAILED) {
            s1 = peg$parseSingleLineComment();
          }
        }
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseWhiteSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLineTerminatorSequence();
        if (s1 === peg$FAILED) {
          s1 = peg$parseComment();
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();
        if (s1 === peg$FAILED) {
          s1 = peg$parseLineTerminatorSequence();
          if (s1 === peg$FAILED) {
            s1 = peg$parseComment();
          }
        }
      }

      return s0;
    }

    function peg$parseAriaCustomHeader() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c562) {
        s0 = peg$c562;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c563); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c16) {
          s0 = peg$c16;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
      }

      return s0;
    }

    function peg$parseAriaCustomIntegerOpcode() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c564) {
        s0 = peg$c564;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c565); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c566) {
          s0 = peg$c566;
          peg$currPos += 13;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c567); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c568) {
            s0 = peg$c568;
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c569); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c570) {
              s0 = peg$c570;
              peg$currPos += 11;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c571); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c572) {
                s0 = peg$c572;
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c573); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 19) === peg$c574) {
                  s0 = peg$c574;
                  peg$currPos += 19;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c575); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseAriaCustomFloatOpcode() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c568) {
        s0 = peg$c568;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c569); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c566) {
          s0 = peg$c566;
          peg$currPos += 13;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c567); }
        }
      }

      return s0;
    }

    function peg$parseAriaCustomSequentialIntegerOpcode() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c576) {
        s0 = peg$c576;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c577); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c578) {
          s0 = peg$c578;
          peg$currPos += 16;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c579); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 14) === peg$c580) {
            s0 = peg$c580;
            peg$currPos += 14;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c581); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 17) === peg$c582) {
              s0 = peg$c582;
              peg$currPos += 17;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c583); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseAriaCustomTextOpcode() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c584) {
        s1 = peg$c584;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c585); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLabel();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c586(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAriaDefaultPathOpcode() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c587) {
        s1 = peg$c587;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c588); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePath();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c589(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLabel() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseLineTerminatorSequence();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c522;
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseSourceCharacter();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c523(s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseLineTerminatorSequence();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c522;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSourceCharacter();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c523(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c524(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAriaCurveOpcode() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 118) {
        s1 = peg$c590;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c591); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c65;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedDecimalLiteral();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c592(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFlexEgOpcode() {
      var s0;

      s0 = peg$parseFlexEgCutoff();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFlexEgSustain();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFlexEgPitch();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFlexEgTime();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFlexEgLevel();
              if (s0 === peg$FAILED) {
                s0 = peg$parseFlexEgShape();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseFlexEgCutoff() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c593) {
        s1 = peg$c593;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c594); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c595) {
            s3 = peg$c595;
            peg$currPos += 8;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c596); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedDecimalLiteral();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c597(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFlexEgSustain() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c593) {
        s1 = peg$c593;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c594); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c598) {
            s3 = peg$c598;
            peg$currPos += 9;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c599); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedDecimalLiteral();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c597(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFlexEgPitch() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c593) {
        s1 = peg$c593;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c594); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c600) {
            s3 = peg$c600;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c601); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedDecimalLiteral();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c597(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFlexEgTime() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c593) {
        s1 = peg$c593;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c594); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c602) {
            s3 = peg$c602;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c603); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedIntegerAsNumber();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c65;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c66); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSignedDecimalLiteral();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c604(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFlexEgLevel() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c593) {
        s1 = peg$c593;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c594); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c605) {
            s3 = peg$c605;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c606); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedIntegerAsNumber();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c65;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c66); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSignedDecimalLiteral();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c607(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFlexEgShape() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c593) {
        s1 = peg$c593;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c594); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c608) {
            s3 = peg$c608;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c609); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedIntegerAsNumber();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c65;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c66); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSignedIntegerAsNumber();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c610(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLfoOpcode() {
      var s0;

      s0 = peg$parseLfoWave();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLfoFreq();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLfoPitch();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLfoDelay();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLfoAmplitude();
              if (s0 === peg$FAILED) {
                s0 = peg$parseLfoCutoff();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseLfoPhase();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseLfoWave() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c611) {
        s1 = peg$c611;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c612); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c613) {
            s3 = peg$c613;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c614); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedIntegerAsNumber();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c615(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLfoFreq() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c611) {
        s1 = peg$c611;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c612); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c616) {
            s3 = peg$c616;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c617); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedDecimalLiteral();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c618(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLfoPitch() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c611) {
        s1 = peg$c611;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c612); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c600) {
            s3 = peg$c600;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c601); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedIntegerAsNumber();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c619(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLfoDelay() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c611) {
        s1 = peg$c611;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c612); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c620) {
            s3 = peg$c620;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c621); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedDecimalLiteral();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c622(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLfoAmplitude() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c611) {
        s1 = peg$c611;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c612); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c623) {
            s3 = peg$c623;
            peg$currPos += 11;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c624); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedDecimalLiteral();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c625(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLfoCutoff() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c611) {
        s1 = peg$c611;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c612); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c595) {
            s3 = peg$c595;
            peg$currPos += 8;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c596); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedDecimalLiteral();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c626(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLfoPhase() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c611) {
        s1 = peg$c611;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c612); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c627) {
            s3 = peg$c627;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c628); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSignedDecimalLiteral();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c629(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
